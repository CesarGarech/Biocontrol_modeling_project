# reg_oxigeno.py
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
try:
    # Intenta importar la librer칤a control
    import control # Python Control Systems Library (necesita: pip install control)
except ImportError:
    # Muestra un error y detiene si la librer칤a no est치 instalada
    st.error("La librer칤a 'python-control' no est치 instalada. Por favor, inst치lala ejecutando: pip install control")
    st.stop() # Detiene la ejecuci칩n del script de esta p치gina
import pandas as pd # Opcional: para mostrar par치metros o resultados en tabla
import traceback # Para mostrar errores detallados si ocurren

# --- Funci칩n Principal de la P치gina de Streamlit ---
def regulatorio_oxigeno_page():
    """
    P치gina de Streamlit para simular control regulatorio de Ox칤geno Disuelto (OD).
    """
    st.header("游눧 Simulaci칩n de Control Regulatorio de Ox칤geno Disuelto")
    st.markdown("""
    Esta p치gina simula un sistema de control de Ox칤geno Disuelto (OD) en lazo cerrado.
    La variable manipulada para controlar el OD es la **velocidad de agitaci칩n (RPM)**,
    cuyo efecto se modela a trav칠s de la funci칩n de transferencia del proceso.

    **Importante:** Este modelo utiliza una **representaci칩n simplificada** con funciones
    de transferencia directas. **No** modela expl칤citamente la tasa de transferencia
    de ox칤geno (OTR) basada en $k_La$ o el consumo de ox칤geno por la biomasa (OUR).
    Es un ejemplo did치ctico de la estructura de un lazo de control.

    * **Proceso:** Relaci칩n simplificada entre la se침al de agitaci칩n (post-actuador) y el OD.
    * **Actuador:** Din치mica asociada al cambio de agitaci칩n (ej. motor).
    * **Sensor:** Din치mica del sensor de OD.
    * **Controlador PID:** Calcula la se침al para el actuador de agitaci칩n.
    """)
    st.markdown("---")

    # --- Explicaci칩n de Funciones de Transferencia ---
    st.subheader("Funciones de Transferencia del Sistema")
    col1, col2 = st.columns(2)
    with col1:
        st.latex(r'G_{proc}(s) = \frac{K_{p_{proc}}}{T_{proc} s + 1}')
        st.caption("Proceso (OD / Se침al Agitaci칩n)")
        st.latex(r'G_{valv}(s) = \frac{K_{p_{valv}}}{T_{valv} s + 1}')
        st.caption("Actuador Agitaci칩n (V치lvula/Motor)")
    with col2:
        st.latex(r'G_{sensor}(s) = \frac{K_{p_{sensor}}}{T_{sensor} s + 1}')
        st.caption("Sensor OD")
        st.latex(r'C(s) = K_p + \frac{K_i}{s} + K_d s')
        st.caption("Controlador PID")

    st.latex(r'G_{open}(s) = G_{proc}(s) G_{valv}(s) G_{sensor}(s)')
    st.caption("Planta Completa en Lazo Abierto (seg칰n ejemplo original)")

    st.latex(r'T(s) = \frac{C(s)G_{open}(s)}{1 + C(s)G_{open}(s)}')
    st.caption("Sistema en Lazo Cerrado (con realimentaci칩n unitaria despu칠s del sensor)")
    st.markdown("---")

    # --- Entradas del Usuario en la Barra Lateral ---
    with st.sidebar:
        st.header("Par치metros de Simulaci칩n")

        with st.expander("1. Par치metros del Proceso", expanded=True):
            # Valores por defecto del script MATLAB
            Kp_proc_o2 = st.number_input("Ganancia Proceso (Kp_proc) [%OD/unidad RPM]", min_value=0.001, value=0.05, step=0.005, format="%.3f", key="Kp_proc_o2", help="Cambio en %OD por cambio en se침al de RPM")
            T_proc_o2 = st.number_input("Constante Tiempo Proceso (T_proc) [s]", min_value=1.0, value=10.0, step=1.0, format="%.1f", key="T_proc_o2")

        with st.expander("2. Par치metros del Actuador (V치lvula/Motor)", expanded=True):
            Kp_valv_o2 = st.number_input("Ganancia Actuador (Kp_valv)", min_value=0.1, value=1.0, step=0.1, format="%.2f", key="Kp_valv_o2")
            T_valv_o2 = st.number_input("Constante Tiempo Actuador (T_valv) [s]", min_value=0.1, value=2.0, step=0.1, format="%.1f", key="T_valv_o2")

        with st.expander("3. Par치metros del Sensor", expanded=True):
            Kp_sensor_o2 = st.number_input("Ganancia Sensor (Kp_sensor)", min_value=0.1, value=1.0, step=0.1, format="%.2f", key="Kp_sensor_o2")
            T_sensor_o2 = st.number_input("Constante Tiempo Sensor (T_sensor) [s]", min_value=0.1, value=1.0, step=0.1, format="%.1f", key="T_sensor_o2")

        with st.expander("4. Par치metros del Controlador PID", expanded=True):
            Kp_pid_o2 = st.number_input("Ganancia Proporcional (Kp)", min_value=0.0, value=1.0, step=0.1, format="%.2f", key="Kp_pid_o2")
            Ki_pid_o2 = st.number_input("Ganancia Integral (Ki)", min_value=0.0, value=1.0, step=0.1, format="%.3f", key="Ki_pid_o2")
            Kd_pid_o2 = st.number_input("Ganancia Derivativa (Kd)", min_value=0.0, value=0.1, step=0.01, format="%.3f", key="Kd_pid_o2")

        with st.expander("5. Configuraci칩n de Simulaci칩n", expanded=True):
            t_final_o2 = st.number_input("Tiempo Final Simulaci칩n [s]", min_value=50.0, value=500.0, step=50.0, key="t_final_o2")
            st.markdown("Configuraci칩n del Setpoint (Escal칩n)")
            sp_initial_o2 = st.number_input("Valor Inicial Setpoint [% OD]", min_value=0.0, max_value=100.0, value=10.0, step=1.0, key="sp_initial_o2")
            sp_final_o2 = st.number_input("Valor Final Setpoint [% OD]", min_value=0.0, max_value=100.0, value=30.0, step=1.0, key="sp_final_o2")
            t_step_o2_value = st.number_input("Tiempo Cambio Setpoint [s]", min_value=0.0, max_value=float(t_final_o2), value=250.0, step=10.0, key="t_step_o2")


    # --- Simulaci칩n y Gr치fica en el 츼rea Principal ---
    st.subheader("Simulaci칩n del Control de Ox칤geno Disuelto")

    if st.button("郊윒잺 Simular Control OD", key="run_o2_sim"):
        try:
            # 1. Definir funciones de transferencia
            s = control.tf('s')
            G_proc = Kp_proc_o2 / (T_proc_o2 * s + 1)
            G_valv = Kp_valv_o2 / (T_valv_o2 * s + 1)
            G_sensor = Kp_sensor_o2 / (T_sensor_o2 * s + 1)
            G_open = G_proc * G_valv * G_sensor # Lazo abierto como en MATLAB

            # 2. Definir controlador PID
            C_pid = control.tf([Kd_pid_o2, Kp_pid_o2, Ki_pid_o2], [1, 0])
            if Ki_pid_o2 == 0 and Kd_pid_o2 == 0: C_pid = Kp_pid_o2 # Simplificar si es P

            # 3. Calcular lazo cerrado
            T_cerrado = control.feedback(C_pid * G_open, 1) # Coincide con MATLAB

            # Mostrar FTs (opcional)
            with st.expander("Ver Funciones de Transferencia Usadas"):
                st.text(f"G_proc(s): {G_proc}")
                st.text(f"G_valv(s): {G_valv}")
                st.text(f"G_sensor(s): {G_sensor}")
                st.text(f"C_pid(s): {C_pid}")
                st.text(f"T_cerrado(s): {T_cerrado}")


            # 4. Preparar simulaci칩n
            num_points_o2 = int(t_final_o2 * 5) + 1 # Suficientes puntos
            t = np.linspace(0, t_final_o2, num_points_o2)
            setpoint = np.ones_like(t) * sp_initial_o2
            setpoint[t >= t_step_o2_value] = sp_final_o2

            # 5. Simular respuesta
            st.write(f"Simulando respuesta para t = 0 a {t_final_o2} s...")
            T, yout = control.forced_response(T_cerrado, T=t, U=setpoint)
            st.write("Simulaci칩n completada.")

            # 6. Graficar resultados
            st.subheader("Respuesta del Sistema")
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(T, setpoint, 'r--', linewidth=2, label='Setpoint (% OD)')
            ax.plot(T, yout, 'b-', linewidth=2, label='Ox칤geno Controlado (% OD)')
            ax.set_xlabel('Tiempo (s)')
            ax.set_ylabel('Ox칤geno Disuelto (% Saturaci칩n)')
            ax.set_title('Respuesta del Control PID de Ox칤geno Disuelto')
            ax.legend(loc='best')
            ax.grid(True)
            # Ajuste din치mico de l칤mites Y
            min_y_plot = min(0, sp_initial_o2, sp_final_o2, np.min(yout) if len(yout)>0 else 0)
            max_y_plot = max(100, sp_initial_o2, sp_final_o2, np.max(yout) if len(yout)>0 else 100)
            range_y_plot = max(5, max_y_plot - min_y_plot) # M칤nimo rango de 5%
            ax.set_ylim(bottom=max(0, min_y_plot - range_y_plot * 0.1),
                        top=min(110, max_y_plot + range_y_plot * 0.1)) # Limitar a 110% m치x
            ax.set_xlim(0, t_final_o2)
            st.pyplot(fig)

            # 7. Mostrar tabla de resultados (opcional)
            df_results_o2 = pd.DataFrame({'Tiempo (s)': T, 'Setpoint (%OD)': setpoint, 'Oxigeno (%OD)': yout})
            with st.expander("Ver datos de simulaci칩n"):
                st.dataframe(df_results_o2.style.format({
                    'Tiempo (s)': '{:.1f}',
                    'Setpoint (%OD)': '{:.1f}',
                    'Oxigeno (%OD)': '{:.2f}'
                }))

        except Exception as e:
            st.error(f"Ocurri칩 un error durante la simulaci칩n de OD:")
            st.exception(e) # Muestra traceback en Streamlit

    else:
        st.info("Ajuste los par치metros en la barra lateral y presione 'Simular Control OD'.")

# --- Punto de Entrada ---
# Permite ejecutar el script directamente: python reg_oxigeno.py
# Si se llama desde main.py, esta parte no se ejecuta, solo se importa la funci칩n.
if __name__ == "__main__":
    st.set_page_config(layout="wide", page_title="Control Ox칤geno")
    regulatorio_oxigeno_page()